--- 
interface Props {
	title: string;
}

const { title } = Astro.props;
console.log("\n  Cristian \n")
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="theme-color" content="#7b899c" >

		<title>{title}</title>
		<meta name="view-transition" content="same-origin">
	</head>
	<body class="bg-slate-400 h-screen">
		<div id="content">
			<slot />
		</div>
	</body>
</html>



<script>
	if(document.startViewTransition) {
		window.navigation.addEventListener("navigate", (event) => {
			const toUrl = new URL(event.destination.url)
			
			// lo Ignoramos
			if (location.origin !== toUrl.origin) return

		// si es una navegacion en el mismo dominio (origen)
			event.intercept({
				async handler () {
					// vamos a cargar la pagina de destino 
					// utilizando fetch para obtener el HTML
					const response = await fetch(toUrl.pathname) // ej => /clean-code
					const text = await response.text() // => .json()

					// de 'text' nos quedamos solo con el contenido html dentro de la etiqueta body
					// usamos regex para extraerlo
					// const [, data] = text.match(/<body[^>]*>([\s\S]*)<\/body>/i)
					const [, data] = text.match(/<body[^>]*>([\s\S]*)<\/body>/i) || [, ""];

					
					// View Transition API
					document.startViewTransition( () => {
						// como tiene que actualizar la vista
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		})
	}

</script>
